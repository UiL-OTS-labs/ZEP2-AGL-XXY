/******************************************************************************\
FILE:           task.zm
AUTHOR:         Theo Veenker <theo.veenker@beexy.nl>
ADAPTED BY:     Silvia Radulescu <S.Radulescu@uu.nl>
Last Modified:	March 15, 2015

DESCRIPTION:

Original script: Auditory Lexical Decision
Actual script: Presents subject with an XXY training language (High Entropy, Medium Entropy or Low Entropy).
There are three training blocks with auditory stimuli. After each training phase there is a short test phase,
and at the end a final test.
In the test phases, subject must indicate as quickly as possible whether the stimulus belongs
to the training language or not.
See readme.txt for more information.


Global structure of this experiment phase:

  - training 1
	- test 1
  - training 2
	- test 2
  - training 3
	- test 3
  - final test
  - memory test 1
  - memory test 2


HISTORY:
2011-10-25 TV   Created.

\******************************************************************************/

import defs;
import stimuli;
import shuffle;
import output;
import test_page;
import global_texts;


Block task
{
    on_event:entry()
    {
        // Randomize tests.
        if (shuffle_test_items() != OK) terminate;
    }


    /*Part instructions
    {
        on_event:entry()
        {
//            pause_page.set_text_size(1000, 600);
            pause_page.set_text(
                "<b>Dear participant,</b>\n"
                "\n"
                "Thank you for participating in this experiment.\n"
                "\n"
                "To respond, hit the left button on the button-box for "
                "<i>No</i> and the right button for <i>Yes</i>.\n"

//                "To respond, hit the left shift key for <i>No</i> and the "
//                "right shift key for <i>Yes</i>.\n"

//                "To respond, hit the left button on the button-box for "
//                "<i>No</i> and the right button for <i>Yes</i>. "
//                "Alternatively you can use the left or right shift keys.\n"

//                "<i>Hit Enter when ready to start.</i>",
                "<i>Hit any button on the button-box when ready to start.</i>",
                true);

            pause_page.action(this);
            control.button_box.enable_all_buttons(CONTINUE);
        }
    }*/


    Block training1
    {
        TestItem        item;   // current item

        on_event:entry()
        {
            num_cycles = train_items[selected_group].size;
            train_items[selected_group].shuffle(0, -1);

            // Prepare test page: progress bar, feedback and prompt enabled.
            train_page.setup(num_cycles);
        }


        on_event:exit()
        {
            train_page.cleanup();
        }


        Trial trial
        {
            on_event:entry()
            {
                item = train_items[selected_group][training1.cycle];

                train_page.action(this, item, reference_time, training1.cycle);
            }

            on_event:exit()
            {
                // Add new row to test output table.
                TestOutput output;
                output.step = "training1";
                output.grp = selected_group;
                output.trial = training1.cycle + 1;
                output.id = item.id;
                output.type = item.type;
                output.sndfn = item.sndfn;
                output.value = -1;
                output.rt = -1;
                output.correct = -1;
                output.atype = -1;
                test_output_append(output);
            }
        }
    }


    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms);
        }
    }


    Part pause1
    {
        on_event:entry()
        {
            pause_page.set_text(
                "Dat was het voor deze fase.\n"
                "Nu in de test, gebruik de muis om op de JA of NEE knop op het scherm te klikken.\n"
                "Druk op START zodra je klaar bent om te beginnen.\n"
                "\n",
                true);

            pause_page.action(this);
            control.enable_all_buttons(CONTINUE);
        }
    }


    Block test1
    {
        TestItem        item;   // current item


        on_event:entry()
        {
            num_cycles = test_items[0].size;
            test_items[0].shuffle(0, -1);

            // Prepare test page: progress bar enabled, feedback and prompt
            // disabled.
            test_page.setup(num_cycles, "1");
        }


        on_event:exit()
        {
            test_page.cleanup();
        }


        Trial trial
        {
            on_event:entry()
            {
                item = test_items[0][test1.cycle];

                test_page.action(this, item, reference_time, test1.cycle);
            }


            on_event:exit()
            {
                // Add new row to test output table.
                TestOutput output;
                output.step = "test1";
                output.grp = selected_group;
                output.trial = test1.cycle + 1;
                output.id = item.id;
                output.type = item.type;
                output.sndfn = item.sndfn;
                output.value = test_page.response.value;
                output.rt = test_page.response.rt;
                output.correct = test_page.response.correct;
                output.atype = test_page.response.atype;
                test_output_append(output);
            }
        }
    }


    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms);
        }
    }


    Block training2
    {
        TestItem        item;   // current item

        on_event:entry()
        {
            num_cycles = train_items[selected_group].size;
	    train_items[selected_group].shuffle(0, -1);

            // Prepare test page: progress bar, feedback and prompt enabled.
            train_page.setup(num_cycles);
        }


        on_event:exit()
        {
            train_page.cleanup();
        }


        Trial trial
        {
            on_event:entry()
            {
                item = train_items[selected_group][training2.cycle];

                train_page.action(this, item, reference_time, training2.cycle);
            }

	    on_event:exit()
	    {
                // Add new row to test output table.
                TestOutput output;
                output.step = "training2";
                output.grp = selected_group;
                output.trial = training2.cycle + 1;
                output.id = item.id;
                output.type = item.type;
                output.sndfn = item.sndfn;
                output.value = -1;
                output.rt = -1;
                output.correct = -1;
                output.atype = -1;
                test_output_append(output);
	    }
        }
    }


    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms);
        }
    }


    Part pause2
    {
        on_event:entry()
        {
            pause_page.set_text(
                "Dat was het voor deze fase.\n"
                "Nu in de test, gebruik de muis om op de JA of NEE knop op het scherm te klikken.\n"
                "Druk op START zodra je klaar bent om te beginnen.\n"
                "\n",
                true);

            pause_page.action(this);
            control.enable_all_buttons(CONTINUE);
        }
    }


    Block test2
    {
        TestItem        item;   // current item


        on_event:entry()
        {
            num_cycles = test_items[1].size;
	    test_items[1].shuffle(0, -1);

            // Prepare test page: progress bar enabled, feedback and prompt
            // disabled.
            test_page.setup(num_cycles, "2");
        }


        on_event:exit()
        {
            test_page.cleanup();
        }


        Trial trial
        {
            on_event:entry()
            {
                item = test_items[1][test2.cycle];

                test_page.action(this, item, reference_time, test2.cycle);
            }


            on_event:exit()
            {
                // Add new row to test output table.
                TestOutput output;
                output.step = "test2";
                output.grp = selected_group;
                output.trial = test2.cycle + 1;
                output.id = item.id;
                output.type = item.type;
                output.sndfn = item.sndfn;
                output.value = test_page.response.value;
                output.rt = test_page.response.rt;
                output.correct = test_page.response.correct;
                output.atype = test_page.response.atype;
                test_output_append(output);
            }
        }
    }


    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms);
        }
    }


    Block training3
    {
        TestItem        item;   // current item

        on_event:entry()
        {
            num_cycles = train_items[selected_group].size;
	    train_items[selected_group].shuffle(0, -1);

            // Prepare test page: progress bar, feedback and prompt enabled.
            train_page.setup(num_cycles);
        }


        on_event:exit()
        {
            train_page.cleanup();
        }


        Trial trial
        {
            on_event:entry()
            {
                item = train_items[selected_group][training3.cycle];

                train_page.action(this, item, reference_time, training3.cycle);
            }

            on_event:exit()
            {
                // Add new row to test output table.
                TestOutput output;
                output.step = "training3";
                output.grp = selected_group;
                output.trial = training3.cycle + 1;
                output.id = item.id;
                output.type = item.type;
                output.sndfn = item.sndfn;
                output.value = -1;
                output.rt = -1;
                output.correct = -1;
                output.atype = -1;
                test_output_append(output);
            }
        }
    }


    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms);
        }
    }


    Part pause3
    {
        on_event:entry()
        {
            pause_page.set_text(
                "Dat was het voor deze fase.\n"
                "Nu in de test, gebruik de muis om op de JA of NEE knop op het scherm te klikken.\n"
                "Druk op START zodra je klaar bent om te beginnen.\n"
                "\n",
                true);

            pause_page.action(this);
            control.enable_all_buttons(CONTINUE);
        }
    }


    Block test3
    {
        TestItem        item;   // current item


        on_event:entry()
        {
            num_cycles = test_items[2].size;
            test_items[2].shuffle(0, -1);

            // Prepare test page: progress bar enabled, feedback and prompt
            // disabled.
            test_page.setup(num_cycles, "3");
        }


        on_event:exit()
        {
            test_page.cleanup();
        }


        Trial trial
        {
            on_event:entry()
            {
                item = test_items[2][test3.cycle];

                test_page.action(this, item, reference_time, test3.cycle);
            }


            on_event:exit()
            {
                // Add new row to test output table.
                TestOutput output;
                output.step = "test3";
                output.grp = selected_group;
                output.trial = test3.cycle + 1;
                output.id = item.id;
                output.type = item.type;
                output.sndfn = item.sndfn;
                output.value = test_page.response.value;
                output.rt = test_page.response.rt;
                output.correct = test_page.response.correct;
                output.atype = test_page.response.atype;
                test_output_append(output);
            }
        }
    }


    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms);
        }
    }


    Part pause4
    {
        on_event:entry()
        {
            pause_page.set_text(
                "Dat was het voor deze fase.\n"
                "Nu in de eindtest, gebruik de muis om op de JA of NEE knop op het scherm te klikken.\n"
                "Druk op START zodra je klaar bent om te beginnen.\n"
                "\n",
                true);

            pause_page.action(this);
            control.enable_all_buttons(CONTINUE);
        }
    }


    Block test4
    {
        TestItem        item;   // current item


        on_event:entry()
        {
            num_cycles = test_items[3].size;
	    test_items[3].shuffle(0, -1);

            // Prepare test page: progress bar enabled, feedback and prompt
            // disabled.
            test_page.setup(num_cycles, "4", 0, test_items[4].size);
        }


        on_event:exit()
        {
            test_page.cleanup();
        }


        Trial trial
        {
            on_event:entry()
            {
                item = test_items[3][test4.cycle];

                test_page.action(this, item, reference_time, test4.cycle);
            }


            on_event:exit()
            {
                // Add new row to test output table.
                TestOutput output;
                output.step = "test4";
                output.grp = selected_group;
                output.trial = test4.cycle + 1;
                output.id = item.id;
                output.type = item.type;
                output.sndfn = item.sndfn;
                output.value = test_page.response.value;
                output.rt = test_page.response.rt;
                output.correct = test_page.response.correct;
                output.atype = test_page.response.atype;
                test_output_append(output);
            }
        }
    }


    Block test5
    {
        TestItem        item;   // current item


        on_event:entry()
        {
            num_cycles = test_items[4].size;
            test_items[4].shuffle(0, -1);

            // Prepare test page: progress bar enabled, feedback and prompt
            // disabled.
            test_page.setup(num_cycles, "5", test_items[3].size, test_items[3].size);
        }


        on_event:exit()
        {
            test_page.cleanup();
        }


        Trial trial
        {
            on_event:entry()
            {
                item = test_items[4][test5.cycle];

                test_page.action(this, item, reference_time, test5.cycle);
            }


            on_event:exit()
            {
                // Add new row to test output table.
                TestOutput output;
                output.step = "test5";
                output.grp = selected_group;
                output.trial = test5.cycle + 1;
                output.id = item.id;
                output.type = item.type;
                output.sndfn = item.sndfn;
                output.value = test_page.response.value;
                output.rt = test_page.response.rt;
                output.correct = test_page.response.correct;
                output.atype = test_page.response.atype;
                test_output_append(output);
            }
        }
    }


    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms);
        }
    }
}


void action(Part caller)
{
    // Activate the task. When the task is done, the registered caller
    // (c.q. the main experiment object) will automatically be signalled.
    task.enter(caller);
}
