/******************************************************************************\
FILE:           random.zm
AUTHOR:         Theo Veenker (UiL-OTS) <T.J.G.Veenker@uu.nl>
ADAPTED BY:     Chris van Run

DESCRIPTION:

Item table randomization functions.


HISTORY:
2012-03-20 TV   Created.
2014-05-02	CR	Adapted.

\******************************************************************************/


// Prepares test_items table with random digits with the restriction that
// > No two identical digits next to each other.
// > No strong and easy to remember incrementing span (i.e. 12345).
// > The string should not contain any previous array as a substring.

// global var. //
TestItem[..] temp_items;

int setup_test_items(int ndigitsmin, int ndigitsmax, int narraysInSet)
{
    int nitems = (ndigitsmax - ndigitsmin + 1);
    temp_items.size = nitems*narraysInSet;

    int dig_num = ndigitsmin;
	int tbl_index = 0;

	println(" --- starting generating pseudo-random digit sequences ---");
    while (dig_num <= ndigitsmax)
    {
		int set_index = 1;
		while (set_index <= narraysInSet)
		{
			int tries = 0;
			while(!approved_stimulus(tbl_index, temp_items))
			{
				if(tries++ > 1000)
				{
					print_error("TO MANY ATTEMPTS AT RANDOMISATION");
					return -1;
				}
				temp_items[tbl_index].digits = gen_random_digit_array(dig_num,0,9);
			}
			tbl_index++;
			set_index++;
		}
	   //set the digits in the table
	   dig_num++;
    }
    println(" --- finished generating pseudo-random digit sequences ---");

    test_items = temp_items;
	return OK;
}

bool approved_stimulus(int tbl_index, TestItem[] test_items)
{
	if(test_items[tbl_index].digits == "")	// Is it initiated?
		return false;

	string focus = test_items[tbl_index].digits;
	int i = 1;

	// > No two identical digits next to each other
	if(CFG_PSEUDORANDOM_PREVENT_DOUBLE)
	{
		string n0 = substring(focus, 0 ,1);
		while(i <= length(focus))
		{
			string loc = substring(focus, i ,1);
			if(loc == n0)
			{
					println("Rejected " + focus + " because of the same digits");
					return false; //nope 2 of the same digits
			}
			else
				n0 = loc;
			i++;
		}
	}

	// > No strong and easy to remember incrementing span (i.e. 12345)
	if(CFG_PSEUDORANDOM_PREVENT_INCREMENTING)
	{
		int incrementCount = 0;
		int decrementCount = 0;

		int threshold = CFG_MAX_INCR_DESC_THRESHOLD;
		i = 0;

		int prev_dig = int(substring(focus, i++, 1));
		while( (length(focus) >= threshold) && i < length(focus))
		{
			int current = int(substring(focus, i++, 1));
			if( current == ( prev_dig + 1))
				incrementCount++;
			if( current == ( prev_dig - 1))
				decrementCount++;
			if(incrementCount > threshold || decrementCount > threshold)
			{
				println("Rejected " + focus + " because of to many subsequent incrementing or decrementing digits");
				return false;
			}
			prev_dig = current;
		}
	}

	// > The string should not contain any previous array as a substring
	if(CFG_PSEUDORANDOM_PREVENT_RECUR_SUBSTRINGS)
	{
		i = 0;
		while( i < test_items.size)
		{
			string current = test_items[i].digits;
			if( i != tbl_index && count_keys(focus, current) > 0) // first part; don't compare focus with itself!
			{
				println("Rejected " + focus + " because of an earlier digit sequence (" + current + ") being a substring.");
				return false;
			}
			i++;
		}
	}

	return true; // if all above succeeds, it is a correct string array to use! =)
}

string gen_random_digit_array(int len, int min, int max)
{
	string array;

	int i = 0;
	int n1;

	 while(i<len)
	 {
		int n0 = random(min, max);
		while(n0 == n1)
			 n0 = random(min, max);
		array = array + string(n0);
		n1 = n0;
		i++;
	}

	return array;
}

int setup_stimuli()	// handles if a preset is defined.
{
	if(!CFG_USE_A_PRESET)
		return setup_test_items(CFG_NDIGITSMIN, CFG_NDIGITSMAX, CFG_NSTIM_p_SET);
	else
	{
		println("Using a preset");
		if(DIGITSPAN_DIRECTION == FORWARD)
		{
			test_items = CFG_PRESET_FORWARD;
			return OK;
		}
		if(DIGITSPAN_DIRECTION == BACKWARD)
		{
			test_items = CFG_PRESET_BACKWARD;
			return OK;
		}
	}
	return -1;
}
