/******************************************************************************\
FILE:           std_pause_page.zm
AUTHOR:         Theo Veenker <theo.veenker@beexy.nl>
ADAPTED BY:     Chris

DESCRIPTION:

Provides a page object for displaying messages. It consists of a message area 
and an OK button.


HISTORY:
2009-12-02 TV   Created as part of the standard Zep modules.
2014-05-26 CvR	Added the keypad enter to be accepted as well.

\******************************************************************************/


Page pause_page
{
    bool        checkkeys;      // if set, continue keys enabled


    init()
    {
        fill_pattern_color = INFO_PAGE_COLOR;
    }


    on_event:key_press()
    {
        if (target != null && checkkeys && 
                (input_key == KEY_Return || input_key == ' ' || input_key == KEY_KP_Enter))
            done(CONTINUE);
        else
            handle_special_key(this, input_key, input_modifiers);
    }


    on_event:message()
    {
        // Handle 'continue' message received from control page.
        if (message_arg == CONTINUE)
            done(CONTINUE);
    }


    VerticalLayout layout
    {
        init()
        {
            options = LAYOUT_SHRINK_ITEMS;
            spacing = 50;
        }


        LabelGadget message
        {
            init()
            {
                font_family = INFO_PAGE_MESSAGE_FONT_FAMILY;
                font_size = INFO_PAGE_MESSAGE_FONT_SIZE;
                fill_pattern_color = INFO_PAGE_MESSAGE_COLOR;
                text_color = INFO_PAGE_MESSAGE_TEXT_COLOR;
                hor_alignment = ALIGN_BEGIN;
                ver_alignment = ALIGN_BEGIN;
                is_wrapping = true;
                size = 900, -1;
                margin = 20;
                border = 3;
                border_style = BORDER_RIDGE;
            }
        }


        ButtonGadget ok
        {
            init()
            {
                string text_but = "<error:LANGUAGE>";
                 if(CFG_LANGUAGE == ENGLISH)
					text_but = CONTINUE_BUTTON_TEXT;
				if(CFG_LANGUAGE == DUTCH)
					text_but = "Ga verder";
                text = text_but;
                font_family = INFO_PAGE_BUTTON_FONT_FAMILY;
                font_size = INFO_PAGE_BUTTON_FONT_SIZE;
                fill_pattern_color = INFO_PAGE_BUTTON_COLOR;
                text_color = INFO_PAGE_BUTTON_TEXT_COLOR;
            }


            on_event:activate()
            {
                done(CONTINUE);
            }
        }
    }


    Timer timer
    {
        on_event:expire()
        {
            done(TIMEOUT);
        }
    }


    void done(int msgid)
    {
        timer.abort();

        checkkeys = false;

        signal_target(msgid);   // Tell caller we're done.
        target = null;

        if (control.target == this)
        {
            control.disable_keys();
            control.target = null;
        }
    }


    //==========================================================================


    void set_text(string txt, bool markup=false)
    {
        layout.message.text = txt, markup;
    }


    void set_text_size(int width, int height)
    {
        layout.message.size = width, height;
    }


    void show_button()
    {
        layout.ok.is_managed = true;
    }


    void hide_button()
    {
        layout.ok.is_managed = false;
    }


    void action_auto(dur timeout=0s, 
        dur showdelay=-1s, dur fadedur=-1s)
    {
        action(null, timeout, showdelay, fadedur, false);
    }


    void action_auto(Object caller, dur timeout=0s, 
        dur showdelay=-1s, dur fadedur=-1s)
    {
        action(caller, timeout, showdelay, fadedur, false);
    }


    void action(Object caller, dur timeout=0s, 
        dur showdelay=-1s, dur fadedur=-1s, bool kbd=true)
    {
        timer.abort();
        // Force page show delay and transition duration in sane range.
        if (showdelay < 0s) showdelay = PAGE_TRANSITION_DELAY;
        else showdelay = limit(showdelay, 0s, MAX_PAGE_TRANSITION_DELAY);
        if (fadedur < 0s) fadedur = PAGE_TRANSITION_DURATION;
        else fadedur = limit(fadedur, 0s, MAX_PAGE_TRANSITION_DURATION);

    	// Clear page transition delay.
    	page_transition_delay = 0s;

	// Let's delay the first test page trial following this page.
	first_trial_delay = FIRST_TRIAL_EXTRA_DELAY;

        if (test_window1.show_page(this, now() + showdelay, fadedur) == 0)
        {
            // Page not yet shown. Extend timeout period (if applicable) 
            // until page is fully visible (fade-in has finished).
            if (timeout > 0s) 
                timeout += expected_transition_finish_time - now();
        }

        if (caller != null)
        {
            checkkeys = kbd && !test_window1.is_output_only();
            if (timeout > 0s) timer.start(now() + timeout);

            target = caller;
            control.target = this;
            control.disable_keys();
            control.enable_key(KEY_Return, CONTINUE);
            control.enable_key(' ', CONTINUE);
			control.enable_key(KEY_KP_Enter, CONTINUE);
			
            if (checkkeys)
                test_window1.activate();
            else if (test_window1.is_output_only())
                ctrl_window.activate();
        }
        else
        {
            checkkeys = false;
            target = null;
        }
    }


    void stop_action()
    {
        timer.abort();

        checkkeys = false;

        target = null;

        if (control.target == this)
        {
            control.disable_keys();
            control.target = null;
        }
    }
}
