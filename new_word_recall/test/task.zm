
import shuffle;
import stimuli;
import output;
import shuffle;
import defs;

import test_page;


Block task {
    
    Part instructions_X
    {
        on_event:entry()
        {
//            pause_page.set_text_size(1000, 600);
            pause_page.set_text(
                "<b>Woorden van de Eeerste Luistertaak</b>\n"
                "\n"
                "Je ziet nu tweelettergrepige woorden een voor een verschijnen op het scherm."
                "Geef voor ieder woord zo snel en accuraat mogelijk aan of je het woord"
                "gehoord hebt tijdens de <i> eerste luistertaak </i> of niet. \n"
                "\n"
                "Als je het woord gehoord hebt klik je op <i>YES</i>. "
                "\n"
                "Als niet, klik dan op <i>NO</i>. \n"
                "\n"

//                "To respond, hit the left shift key for <i>No</i> and the "
//                "right shift key for <i>Yes</i>.\n"

//                "To respond, hit the left button on the button-box for "
//                "<i>No</i> and the right button for <i>Yes</i>. "
//                "Alternatively you can use the left or right shift keys.\n"


                "<i> Druk CONTINUE om de test te beginnen.</i>", 
                true);

            pause_page.action(this);
            control.enable_all_buttons(CONTINUE);
        }
    }


    Block test_X
    {
        TestItem        item;   // current item


        on_event:entry()
        {
            // Randomize test items table.
            if (shuffle_test_items_X() != OK) terminate;

            num_cycles = test_items_X.size;
            //num_cycles = 3;

            // Prepare test page: progress bar enabled, feedback and prompt 
            // disabled.
            test_page.setup(num_cycles, false, false);
        }


        on_event:exit()
        {
            test_page.cleanup();

            // Save test phase output table as CSV file.
            save_trial_data();
        }


        Trial trial
        {
            on_event:entry()
            {
                item = test_items_X[test_X.cycle];

                test_page.action(this, item, reference_time, test_X.cycle);
            }


            on_event:exit()
            {
                // Add new row to test output table.
                TestOutput output;
                output.trialnum = test_X.cycle + 1;
                output.id = item.id;
                output.type = item.type;
                output.word = item.word;
                output.value = test_page.response.value;
                output.rt = test_page.response.rt;
                output.correct = test_page.response.correct;
                output.atype = test_page.response.atype;
                test_output_append(output);
            }
        }
    }


    Part instructions_ab
    {
        on_event:entry()
        {
//            pause_page.set_text_size(1000, 600);
            pause_page.set_text(
                "<b>Woorden van de Eeerste Luistertaak</b>\n"
                "\n"
                "Je ziet nu EENLETTERGREPIGE woorden een voor een verschijnen op het scherm."
                "Geef voor ieder woord zo snel en accuraat mogelijk aan of je het woord"
                "gehoord hebt tijdens de <i> eerste luistertaak </i> of niet. \n"
                "\n"
                "Als je het woord gehoord hebt klik je op <i>YES</i>. "
                "\n"
                "Als niet, klik dan op <i>NO</i>. \n"
                "\n"

//                "To respond, hit the left shift key for <i>No</i> and the "
//                "right shift key for <i>Yes</i>.\n"

//                "To respond, hit the left button on the button-box for "
//                "<i>No</i> and the right button for <i>Yes</i>. "
//                "Alternatively you can use the left or right shift keys.\n"


                "<i> Druk CONTINUE om de test te beginnen.</i>", 
                true);

            pause_page.action(this);
            control.enable_all_buttons(CONTINUE);
        }
    }


    Block test_ab
    {
        TestItem        item;   // current item


        on_event:entry()
        {
// Randomize test items table.
            if (shuffle_test_items_ab() != OK) terminate;

            num_cycles = test_items_ab.size;
            //num_cycles = 3;

            // Prepare test page: progress bar enabled, feedback and prompt 
            // disabled.
            test_page.setup(num_cycles, false, false);
        }


        on_event:exit()
        {
            test_page.cleanup();

            // Save test phase output table as CSV file.
            save_trial_data();
        }


        Trial trial
        {
            on_event:entry()
            {
                item = test_items_ab[test_ab.cycle];

                test_page.action(this, item, reference_time, test_ab.cycle);
            }


            on_event:exit()
            {
                // Add new row to test output table.
                TestOutput output;
                output.trialnum = test_ab.cycle + 1;
                output.id = item.id;
                output.type = item.type;
                output.word = item.word;
                output.value = test_page.response.value;
                output.rt = test_page.response.rt;
                output.correct = test_page.response.correct;
                output.atype = test_page.response.atype;
                test_output_append(output);
            }
        }
    }
}

void action (Part caller)
{
    // Task will signal the caller (experiment) when done
    task.enter(caller);
}

