
//requires 2.5;

import std_windows1;
import global_texts;
//import std_texts_en;
import std_entry_page1;
import std_exit_page1;
import std_pause_page;
import std_blank_page;

import test::defs;
import test::condition;
import test::task;
import test::shuffle;


Experiment experiment
{
    on_event:entry()
    {
        test::init_conditions_from_test_group(selected_group);
        if (have_flag("short")) { // for testing purposes
            test::NUM_TRAININGS_ITEMS = 12;
        }
        test::TOT_TRAININGS_ITEMS = test::NUM_TRAININGS_ITEMS * 3;
        test::prepare_training_items();

        string message = "Unable to randomize according constraints";

        if (test::shuffle_test_items(test::training_items1) != OK)
            terminate message;
        if (test::shuffle_test_items(test::training_items2) != OK)
            terminate message;
        if (test::shuffle_test_items(test::training_items3) != OK)
            terminate message;

        show_test_windows();
    }


    on_event:message()
    {
        // On Ctrl+F4 jump unconditionally to the thank-you part.
        if (message_sender == control && message_arg == SYS_STOP)
        {
            control.mark_experiment_aborted();
            thankyou.enter();
        }
    }


    Part welcome
    {
        on_event:entry()
        {
            entry_page.set_text(WELCOME_TEXT);
            entry_page.action(this, 0s);
        }
    }


    Part phase1
    {
        on_event:entry()
        {
            test::action(this);
        }
    }


    Part thankyou
    {
        on_event:entry()
        {
            control.end_experiment();   // Check-in session.

            exit_page.set_text(THANK_YOU_TEXT);
            exit_page.action(this, 10s);
        }
    }
}
